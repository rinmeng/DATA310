x = "Good"
y = "Luck"
paste("", paste(x,y), "!", sep=":-)")
15%%6
15 %% 6
seq(3,8,2)
15 % 6
seq(3,8,2)^(3:1)
y = c(-2,1,3)
y^y
rep(c(2,9,7,3), 1:4)
rep(3,4)
rep(3,by=4)
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
data <- c("red", "blue", "green", "red", "green", "green")
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
levels(factor_data)
# print the factor levels
factor_data
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
factor_data
runif(25,0,5)
samle(1:2, size = 6, replace= TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
x = c(1,7,NA,2,4,3,NA,5,NA,6)
where(x == "NA")
which(x == "NA")
x = c(1,7,NA,2,4,3,NA,5,NA,6)
which(x == "NA")
length(x[(x=="NA")])
which(is.na(x))
which(x[x=="NA"])
which(x == 1)
which(x == 7)
which(x == NA)
which(x == 4)
which(!is.na(x))
is.na(X)
is.na(x)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
y = paste(x[is.na(x)], mean(x[!is.na(x)]))
y
cuckoos
library(DAAG)
cuckoos
library(DAAG)
cuckoos
chickwts
chickwts[3,1]
chickwts[3]
chickwts[3,]
chickwts[71,]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df
df[df$city == Houston]
df[df$city == "Houston":]
df[df$city == "Houston"]
df[df$city == "Houston",]
df[df$city != "Houston",]
df[df$city != "Houston", && df$age > 25]
df[df$city != "Houston", && df$age > 25,]
df[df$city != "Houston", & df$age > 25,]
df[df$city != "Houston" & df$age > 25,]
df[df$city != "Houston" & df$age >= 25,]
df$name
df[1,]
df[2]
women
df[,2]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df[,2]
df[2,2]
df
df[,2]
names(df)
names(df)[,2]
names(df)[2]
rownames(df)
rownames(df)[2]
dim(df)
# Define two vectors
a <- c(1, 2, 3)
b <- c(1.001, 2.002, 3.003)
# Compare the vectors using all.equal()
all.equal(a, b)
identical(a,b)
plot(circumference  ̃ age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference  ̃ age,
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$tree))
for (i in 1:5)
lines(circumference~ age, data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
Orange
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5)
lines(circumference~age, data = subset(Orange, Tree == i), lty = i)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
dotplot(women)
women
dotplot(height~weight, data = women)
barplot(height~weight, data = women)
barplot(height~weight, data = women, main = "women plot")
barplot(height~weight, data = women, main = "women plot", cex:0.5)
barplot(height~weight, data = women, main = "women plot", xlab=" lol")
xyplot(women)
library(DAAG)
install.packages(DAAG)
"DAAG"
library(DAAG)
installed.packages()
install.packages("DAAG")
library(DAAG)
head(litters)
litters
head(litters)
# Calculate SSE
SSE <- sum((distance - predicted_values)^2)
source("C:/Users/agarp/DATA310/a2/a2.R")
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
x_bar <- mean(angle)
y_bar <- mean(distance)
# Calculate Sxx and Sxy
Sxx <- sum((angle - x_bar)^2)
Sxy <- sum((angle - x_bar) * (distance - y_bar))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * x_bar
# Calculate residuals
residuals <- distance - (beta0 + beta1 * angle)
# Calculate the variance of the residuals
s_squared <- sum(residuals^2) / (length(angle) - 2)
# Standard errors
SE_beta1 <- sqrt(s_squared / Sxx)
SE_beta0 <- sqrt(s_squared * (1 / length(angle) + x_bar^2 / Sxx))
# Critical t-value for 95% CI with 7 degrees of freedom
t_value <- qt(0.975, df = length(angle) - 2)
# Confidence intervals
CI_beta1 <- c(beta1 - t_value * SE_beta1, beta1 + t_value * SE_beta1)
CI_beta0 <- c(beta0 - t_value * SE_beta0, beta0 + t_value * SE_beta0)
# Output the results
cat("95% Confidence Interval for Slope (beta1):", CI_beta1, "\n")
cat("95% Confidence Interval for Intercept (beta0):", CI_beta0, "\n")
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
y_bar <- mean(distance)
# Calculate SST
SST <- sum((distance - y_bar)^2)
# Calculate Sxy and Sxx
Sxy <- sum((angle - mean(angle)) * (distance - y_bar))
Sxx <- sum((angle - mean(angle))^2)
# Calculate beta coefficients
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * mean(angle)
# Predicted values
predicted_values <- beta0 + beta1 * angle
# Calculate SSE
SSE <- sum((distance - predicted_values)^2)
# Calculate SSR
SSR <- SST - SSE
# Degrees of freedom
n <- length(distance)
dfR <- 1  # for regression (p - 1)
dfE <- n - 2  # for residual (n - p)
dfT <- n - 1  # total (n - 1)
# Mean Squares
MSR <- SSR / dfR
MSE <- SSE / dfE
# F-statistic
F_statistic <- MSR / MSE
# Print results
cat("SST:", SST, "\n")
cat("SSR:", SSR, "\n")
cat("SSE:", SSE, "\n")
cat("Mean Square Regression (MSR):", MSR, "\n")
cat("Mean Square Error (MSE):", MSE, "\n")
cat("F-statistic:", F_statistic, "\n")
Sxx
SST
beta1
beta0
SST
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
y_bar <- mean(distance)
# Calculate Sxy and Sxx
Sxy <- sum((angle - mean(angle)) * (distance - y_bar))
Sxx <- sum((angle - mean(angle))^2)
# Calculate beta coefficients
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * mean(angle)
# Predicted values
yhat <- beta0 + beta1 * angle
# Calculate SST
SST <- sum((distance - y_bar)^2)
# Calculate SSE
SSE <- sum((distance - yhat)^2)
# Calculate SSR
SSR <- SST - SSE
# Degrees of freedom
n <- length(distance)
dfR <- 1  # for regression (p - 1)
dfE <- n - 2  # for residual (n - p)
dfT <- n - 1  # total (n - 1)
# Mean Squares
MSR <- SSR / dfR
MSE <- SSE / dfE
# F-statistic
F_statistic <- MSR / MSE
# Print results
cat("SST:", SST, "\n")
cat("SSR:", SSR, "\n")
cat("SSE:", SSE, "\n")
cat("Mean Square Regression (MSR):", MSR, "\n")
cat("Mean Square Error (MSE):", MSE, "\n")
cat("F-statistic:", F_statistic, "\n")
anova(angle,distance)
anova(df3)
df3<- data.frame(distance, angle)
anova(df3)
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
lm3 <- lm(distance ~ angle)
summary(lm3)
anova(lm3)
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
y_bar <- mean(distance)
# Calculate Sxy and Sxx
Sxy <- sum((angle - mean(angle)) * (distance - y_bar))
Sxx <- sum((angle - mean(angle))^2)
# Calculate beta coefficients
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * mean(angle)
# Predicted values
yhat <- beta0 + beta1 * angle
# Calculate SST
SST <- sum((distance - y_bar)^2)
# Calculate SSE
SSE <- sum((distance - yhat)^2)
# Calculate SSR
SSR <- SST - SSE
# Degrees of freedom
n <- length(distance)
dfR <- 1  # for regression (p - 1)
dfE <- n - 2  # for residual (n - p)
dfT <- n - 1  # total (n - 1)
# Mean Squares
MSR <- SSR / dfR
MSE <- SSE / dfE
# F-statistic
F_statistic <- MSR / MSE
# Print results
cat("SST:", SST, "\n")
cat("SSE:", SSE, "\n")
cat("SSR:", SSR, "\n")
cat("Mean Square Regression (MSR):", MSR, "\n")
cat("Mean Square Error (MSE):", MSE, "\n")
cat("F-statistic:", F_statistic, "\n")
# Predicted value at x0 = 2.5
x0 <- 2.5
y_hat_0 <- beta0 + beta1 * x0
# Calculate residuals and variance (s^2)
residuals <- distance - (beta0 + beta1 * angle)
s_squared <- sum(residuals^2) / (length(angle) - 2)
# Calculate t-value for 95% confidence interval (approximation)
t_value <- 2.3646  # Approximate value for 95% CI with df = 7 (n - 2)
# Confidence Interval for Expected Distance (Mean Response)
SE_mean_response <- sqrt(s_squared * (1 / length(angle) + (x0 - x_bar)^2 / Sxx))
CI_mean_response <- c(y_hat_0 - t_value * SE_mean_response, y_hat_0 + t_value * SE_mean_response)
# Prediction Interval for a Single Observation
SE_pred_interval <- sqrt(s_squared * (1 + 1 / length(angle) + (x0 - x_bar)^2 / Sxx))
PI_single_observation <- c(y_hat_0 - t_value * SE_pred_interval, y_hat_0 + t_value * SE_pred_interval)
# Print results
cat("95% Confidence Interval for Expected Distance at x0 =", x0, ":", CI_mean_response, "\n")
cat("95% Prediction Interval for Single Observation at x0 =", x0, ":", PI_single_observation, "\n")
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Define x0 and calculate mean of x (angle)
xbar0 <- 2.5
xbar <- mean(angle)
# Calculate Sxx and Sxy
Sxx <- sum((angle - xbar)^2)
Sxy <- sum((angle - xbar) * (distance - mean(distance)))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- mean(distance) - beta1 * xbar
# Calculate y_hat_0, the predicted value at x_0 = 2.5
y0 <- beta0 + beta1 * xbar0
# Calculate residuals and MSE
residuals <- distance - (beta0 + beta1 * angle)
MSE <- sum(residuals^2) / (length(angle) - 2)
# Standard Error for prediction at x_0 (SE(x0))
SEy0 <- sqrt(MSE * (1 + (xbar0 - xbar)^2 / Sxx))
# Calculate 95% prediction interval for y0 at x_0 = 2.5
t_value <- 2.364  # Approximate t-value for 95% CI with df = 7
PI_y0 <- y0 + c(-1, 1) * t_value * SEy0
# Print results
cat("Mean of angle (xbar):", xbar, "\n")
cat("Predicted distance at x0 =", xbar0, "(y0):", y0, "\n")
cat("Standard Error for Prediction Interval at x0 (SE(x0)):", SEy0, "\n")
cat("95% Prediction Interval for y0 at x0 =", xbar0, ":", PI_y0, "\n")
s_squared <- sum(residuals^2) / (length(angle) - 2)
s_squared
# Predicted value at x0 = 2.5
x0 <- 2.5
y_hat_0 <- beta0 + beta1 * x0
# Calculate residuals and variance (s^2)
residuals <- distance - (beta0 + beta1 * angle)
ssquared <- sum(residuals^2) / (length(angle) - 2)
# Calculate t-value for 95% confidence interval (approximation)
t_value <- 2.3646  # Approximate value for 95% CI with df = 7 (n - 2)
# Confidence Interval for Expected Distance (Mean Response)
SE_mean_response <- sqrt(ssquared * (1 / length(angle) + (x0 - x_bar)^2 / Sxx))
CI_mean_response <- c(y_hat_0 - t_value * SE_mean_response, y_hat_0 + t_value * SE_mean_response)
# Prediction Interval for a Single Observation
SE_pred_interval <- sqrt(ssquared * (1 + 1 / length(angle) + (x0 - x_bar)^2 / Sxx))
PI_single_observation <- c(y_hat_0 - t_value * SE_pred_interval, y_hat_0 + t_value * SE_pred_interval)
# Print results
cat("95% Confidence Interval for Expected Distance at x0 =", x0, ":", CI_mean_response, "\n")
cat("95% Prediction Interval for Single Observation at x0 =", x0, ":", PI_single_observation, "\n")
xbar
Sxx
ssquared
y0
length(angle)
SE_pred_interval
# Predicted value at x0 = 2.5
x0 <- 2.5
y_hat_0 <- beta0 + beta1 * x0
# Calculate residuals and variance (s^2)
residuals <- distance - (beta0 + beta1 * angle)
ssquared <- sum(residuals^2) / (length(angle) - 2)
# Calculate t-value for 95% confidence interval (approximation)
t_value <- 2.3646  # Approximate value for 95% CI with df = 7 (n - 2)
# Confidence Interval for Expected Distance (Mean Response)
semr <- sqrt(ssquared * (1 / length(angle) + (x0 - x_bar)^2 / Sxx))
CI_mean_response <- c(y_hat_0 - t_value * semr, y_hat_0 + t_value * semr)
# Prediction Interval for a Single Observation
SE_pred_interval <- sqrt(ssquared * (1 + 1 / length(angle) + (x0 - x_bar)^2 / Sxx))
PI_single_observation <- c(y_hat_0 - t_value * SE_pred_interval, y_hat_0 + t_value * SE_pred_interval)
# Print results
cat("95% Confidence Interval for Expected Distance at x0 =", x0, ":", CI_mean_response, "\n")
cat("95% Prediction Interval for Single Observation at x0 =", x0, ":", PI_single_observation, "\n")
qt(0.025,7)
sepi
# Prediction Interval for a Single Observation
sepi <- sqrt(ssquared * (1 + 1 / length(angle) + (x0 - x_bar)^2 / Sxx))
sepi
SE_beta1
setwd("C:/Users/agarp/DATA310/a2")
library(DAAG)
data("fossum", package = "DAAG")
plot(fossum$totlngth, fossum$hdlngth,
xlab = "Total Length (cm)",
ylab = "Head Length (mm)",
main = "Head Length vs Total Length in Female Possums",
pch = 16, col = "blue")
# Scatter plot of hdlngth (head length) against totlngth (total length)
plot(fossum$totlngth, fossum$hdlngth,
xlab = "Total Length (cm)",
ylab = "Head Length (mm)",
main = "Head Length vs Total Length in Female Possums",
pch = 16, col = "black")
model <- lm(hdlngth ~ totlngth, data = fossum)
# Output the model summary to see coefficients
summary(model)
anova(model)
F_critical <- qf(1 - alpha, dfR, dfE)
alpha <- 0.05
dfR <- 1
dfE <- 41
F_critical <- qf(1 - alpha, dfR, dfE)
F_critical
# F-statistic from ANOVA table
F_statistic <- 63.38
# Degrees of freedom
dfR <- 1  # Regression
dfE <- 41  # Error
# Critical F-value for a two-tailed test at alpha = 0.05
alpha <- 0.05
F_critical <- qf(1 - alpha, dfR, dfE)
# Output results
cat("Calculated F-statistic:", F_statistic, "\n")
cat("Critical F-value (two-tailed):", F_critical, "\n")
# Conclusion
if (F_statistic > F_critical) {
cat("Reject the null hypothesis: There is a significant relationship between hdlngth and totlngth.\n")
} else {
cat("Fail to reject the null hypothesis: There is no significant relationship between hdlngth and totlngth.\n")
}
new_data <- data.frame(totlngth = 85)
# Get the 95% prediction interval
predict(model, new_data, interval = "prediction", level = 0.95)
plot(fitted(model), resid(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted Values",
pch = 16, col = "purple")
abline(h = 0, col = "red", lty = 2)
plot(fitted(model), resid(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted Values",
pch = 16, col = "black")
abline(h = 0, col = "red", lty = 2)
plot(fitted(model), resid(model),
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted Values",
pch = 16, col = "black")
abline(h = 0, col = "red", lty = 2)
plot(fossum$totlngth, fossum$hdlngth,
xlab = "Total Length (cm)",
ylab = "Head Length (mm)",
main = "Head Length vs Total Length in Female Possums",
pch = 16, col = "black"
)
abline(model, col = "red")
