x = "Good"
y = "Luck"
paste("", paste(x,y), "!", sep=":-)")
15%%6
15 %% 6
seq(3,8,2)
15 % 6
seq(3,8,2)^(3:1)
y = c(-2,1,3)
y^y
rep(c(2,9,7,3), 1:4)
rep(3,4)
rep(3,by=4)
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
data <- c("red", "blue", "green", "red", "green", "green")
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
levels(factor_data)
# print the factor levels
factor_data
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
factor_data
runif(25,0,5)
samle(1:2, size = 6, replace= TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
x = c(1,7,NA,2,4,3,NA,5,NA,6)
where(x == "NA")
which(x == "NA")
x = c(1,7,NA,2,4,3,NA,5,NA,6)
which(x == "NA")
length(x[(x=="NA")])
which(is.na(x))
which(x[x=="NA"])
which(x == 1)
which(x == 7)
which(x == NA)
which(x == 4)
which(!is.na(x))
is.na(X)
is.na(x)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
y = paste(x[is.na(x)], mean(x[!is.na(x)]))
y
cuckoos
library(DAAG)
cuckoos
library(DAAG)
cuckoos
chickwts
chickwts[3,1]
chickwts[3]
chickwts[3,]
chickwts[71,]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df
df[df$city == Houston]
df[df$city == "Houston":]
df[df$city == "Houston"]
df[df$city == "Houston",]
df[df$city != "Houston",]
df[df$city != "Houston", && df$age > 25]
df[df$city != "Houston", && df$age > 25,]
df[df$city != "Houston", & df$age > 25,]
df[df$city != "Houston" & df$age > 25,]
df[df$city != "Houston" & df$age >= 25,]
df$name
df[1,]
df[2]
women
df[,2]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df[,2]
df[2,2]
df
df[,2]
names(df)
names(df)[,2]
names(df)[2]
rownames(df)
rownames(df)[2]
dim(df)
# Define two vectors
a <- c(1, 2, 3)
b <- c(1.001, 2.002, 3.003)
# Compare the vectors using all.equal()
all.equal(a, b)
identical(a,b)
plot(circumference  ̃ age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference  ̃ age,
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$tree))
for (i in 1:5)
lines(circumference~ age, data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
Orange
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5)
lines(circumference~age, data = subset(Orange, Tree == i), lty = i)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
dotplot(women)
women
dotplot(height~weight, data = women)
barplot(height~weight, data = women)
barplot(height~weight, data = women, main = "women plot")
barplot(height~weight, data = women, main = "women plot", cex:0.5)
barplot(height~weight, data = women, main = "women plot", xlab=" lol")
xyplot(women)
library(DAAG)
install.packages(DAAG)
"DAAG"
library(DAAG)
installed.packages()
install.packages("DAAG")
library(DAAG)
head(litters)
litters
head(litters)
model
setwd("C:/Users/agarp/DATA310/a2")
model <- lm(y~xf)
model <- lm(y ~ x)
model <- lm(y ~ x, data=df)
model <- lm(y ~ 0 + x, data=df)  # The '0 +' forces regression through origin
# Viewing the summary of the model
summary(model)
source("C:/Users/agarp/DATA310/a2/a2.R")
x <- c(1.8, 0.1, 0.2, 1.4, 2.4, 0.9, 0.9, 0.6, 0.2, 3.7)
y <- c(2.0, 0.4, 1.9, 2.7, 3.2, 1.1, 1.5, 1.1, 0.8, 4.1)
# Creating a data frame
data <- data.frame(x, y)
# Fitting the linear model
model <- lm(y ~ x, data = data)
# Viewing the summary of the model
summary(model)
residuals(model)
res <- residuals(model)
mean(res)
# Fitting the linear model
model <- lm(y ~ 0 + x, data = data)
# Viewing the summary of the model
summary(model)
source("C:/Users/agarp/DATA310/a2/a2.R")
# Viewing the summary of the model
summary(model)
# Viewing the summary of the model
summary(model)
# Viewing the summary of the model
summary(model)
# Viewing the summary of the model
summary(model)
x <- c(1.8, 0.1, 0.2, 1.4, 2.4, 0.9, 0.9, 0.6, 0.2, 3.7)
x <- c(1.8, 0.1, 0.2, 1.4, 2.4, 0.9, 0.9, 0.6, 0.2, 3.7)
y <- c(2.0, 0.4, 1.9, 2.7, 3.2, 1.1, 1.5, 1.1, 0.8, 4.1)
# Creating a data frame
data <- data.frame(x, y)
# Fitting the linear model
model <- lm(y ~ 0 + x, data = data)
# Viewing the summary of the model
summary(model)
res <- residuals(model)
mean(res)
res
# Creating a scatterplot
plot(data$x, data$y, main = "Scatterplot with Fitted Line",
xlab = "x", ylab = "y", pch = 19)
# Adding the fitted line
abline(model, col = "blue")
# Creating a scatterplot
plot(data$x, data$y, main = "Scatterplot with Fitted Line",
xlab = "x", ylab = "y", pch = 19)
# Adding the fitted line
abline(model, col = "red")
x <- c(1.8, 0.1, 0.2, 1.4, 2.4, 0.9, 0.9, 0.6, 0.2, 3.7)
y <- c(2.0, 0.4, 1.9, 2.7, 3.2, 1.1, 1.5, 1.1, 0.8, 4.1)
# Creating a data frame
data <- data.frame(x, y)
# Fitting the linear model
model <- lm(y ~ x, data = data)
# Viewing the summary of the model
summary(model)
res <- residuals(model)
res
mean(res)
plot(data$x, data$y, main = "Scatterplot with Fitted Line",
xlab = "x", ylab = "y", pch = 19)
# Adding the fitted line
abline(model, col = "red")
# Fitting the linear model
model <- lm(y ~ 0 + x, data = data)
# Viewing the summary of the model
summary(model)
x <- c(1.8, 0.1, 0.2, 1.4, 2.4, 0.9, 0.9, 0.6, 0.2, 3.7)
y <- c(2.0, 0.4, 1.9, 2.7, 3.2, 1.1, 1.5, 1.1, 0.8, 4.1)
# Creating a data frame
data <- data.frame(x, y)
# Fitting the linear model
model <- lm(y ~ 0 + x, data = data)
# Viewing the summary of the model
summary(model)
res <- residuals(model)
res
mean(res)
plot(data$x, data$y, main = "Scatterplot with Fitted Line",
xlab = "x", ylab = "y", pch = 19)
# Adding the fitted line
abline(model, col = "red")
mean(res)
# Viewing the summary of the model
summary(model)
# Define the vectors for angle and distance
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
# Define the vectors for angle and distance
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Step 1: Calculate the sum of (angle * distance) and sum of (angle^2)
sum_angle_distance <- sum(angle * distance)
sum_angle_squared <- sum(angle^2)
# Step 2: Calculate the slope coefficient (beta)
beta <- sum_angle_distance / sum_angle_squared
beta
# Step 3: Calculate the predicted distances based on the angle values
predicted_distance <- angle * beta
predicted_distance
plot(df3)
# Define the vectors for angle and distance
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
df3 <- data.frame(distance, angle)
plot(df3)
# Define the vectors for angle and distance
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
df3 <- data.frame(angle, distance)
plot(df3)
plot(df3$angle, df3$distance,
main = "Scatterplot of Angle vs Distance",
xlab = "Angle", ylab = "Distance", pch = 19
)
abline(model, col = "red")
# Define the vectors for angle and distance
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
plot(angle, distance,
xlab = "Angle of Ramp (degrees)", ylab = "Distance Travelled (m)",
main = "Distance Travelled by Angle of Ramp", pch = 19, col = "blue"
)
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
x_bar <- mean(angle)
y_bar <- mean(distance)
# Calculate Sxx and Sxy
Sxx <- sum((angle - x_bar)^2)
Sxy <- sum((angle - x_bar) * (distance - y_bar))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * x_bar
# Output the slope and intercept
cat("Slope (beta1):", beta1, "\n")
cat("Intercept (beta0):", beta0, "\n")
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
x_bar <- mean(angle)
y_bar <- mean(distance)
# Calculate Sxx and Sxy
Sxx <- sum((angle - x_bar)^2)
Sxy <- sum((angle - x_bar) * (distance - y_bar))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * x_bar
# Calculate predicted values
predicted_values <- beta0 + beta1 * angle
# Calculate residuals
residuals <- distance - predicted_values
# Calculate sum of squared residuals (SSR)
SSR <- sum(residuals^2)
# Calculate Mean Squared Error (MSE)
MSE <- SSR / (length(angle) - 2)
# Output the MSE
cat("Mean Squared Error (MSE):", MSE, "\n")
# Calculate residuals
residuals <- distance - (beta0 + beta1 * angle)
# Calculate the variance of the residuals
s_squared <- sum(residuals^2) / (length(angle) - 2)
# Standard errors
SE_beta1 <- sqrt(s_squared / Sxx)
SE_beta0 <- sqrt(s_squared * (1 / length(angle) + x_bar^2 / Sxx))
# Critical t-value for 95% CI with 7 degrees of freedom
t_value <- qt(0.975, df = length(angle) - 2)
# Confidence intervals
CI_beta1 <- c(beta1 - t_value * SE_beta1, beta1 + t_value * SE_beta1)
CI_beta0 <- c(beta0 - t_value * SE_beta0, beta0 + t_value * SE_beta0)
# Output the results
cat("95% Confidence Interval for Slope (beta1):", CI_beta1, "\n")
cat("95% Confidence Interval for Intercept (beta0):", CI_beta0, "\n")
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
x_bar <- mean(angle)
y_bar <- mean(distance)
# Calculate Sxx and Sxy
Sxx <- sum((angle - x_bar)^2)
Sxy <- sum((angle - x_bar) * (distance - y_bar))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * x_bar
# Calculate residuals
residuals <- distance - (beta0 + beta1 * angle)
# Calculate the variance of the residuals
s_squared <- sum(residuals^2) / (length(angle) - 2)
# Standard errors
SE_beta1 <- sqrt(s_squared / Sxx)
SE_beta0 <- sqrt(s_squared * (1 / length(angle) + x_bar^2 / Sxx))
# Critical t-value for 95% CI with 7 degrees of freedom
t_value <- qt(0.975, df = length(angle) - 2)
# Confidence intervals
CI_beta1 <- c(beta1 - t_value * SE_beta1, beta1 + t_value * SE_beta1)
CI_beta0 <- c(beta0 - t_value * SE_beta0, beta0 + t_value * SE_beta0)
# Output the results
cat("95% Confidence Interval for Slope (beta1):", CI_beta1, "\n")
cat("95% Confidence Interval for Intercept (beta0):", CI_beta0, "\n")
t_value
s_squared
SE_beta1
residuals
residuals^2
s_squared
SE_beta0
SE_beta1
# Output the results
cat("95% Confidence Interval for Slope (beta1):", CI_beta1, "\n")
cat("95% Confidence Interval for Intercept (beta0):", CI_beta0, "\n")
beta_1
# Data
angle <- c(1.3, 4.0, 2.7, 2.2, 3.6, 4.9, 0.9, 1.1, 3.1)
distance <- c(0.43, 0.84, 0.58, 0.58, 0.70, 1.00, 0.27, 0.29, 0.63)
# Calculate means
x_bar <- mean(angle)
y_bar <- mean(distance)
# Calculate Sxx and Sxy
Sxx <- sum((angle - x_bar)^2)
Sxy <- sum((angle - x_bar) * (distance - y_bar))
# Calculate slope (beta1) and intercept (beta0)
beta1 <- Sxy / Sxx
beta0 <- y_bar - beta1 * x_bar
# Calculate residuals
residuals <- distance - (beta0 + beta1 * angle)
# Calculate the variance of the residuals
s_squared <- sum(residuals^2) / (length(angle) - 2)
# Standard errors
SE_beta1 <- sqrt(s_squared / Sxx)
SE_beta0 <- sqrt(s_squared * (1 / length(angle) + x_bar^2 / Sxx))
# Critical t-value for 95% CI with 7 degrees of freedom
t_value <- qt(0.975, df = length(angle) - 2)
# Confidence intervals
CI_beta1 <- c(beta1 - t_value * SE_beta1, beta1 + t_value * SE_beta1)
CI_beta0 <- c(beta0 - t_value * SE_beta0, beta0 + t_value * SE_beta0)
# Output the results
cat("95% Confidence Interval for Slope (beta1):", CI_beta1, "\n")
cat("95% Confidence Interval for Intercept (beta0):", CI_beta0, "\n")
beta1
SE_beta0
s_squared
Sxx
SE_beta0
